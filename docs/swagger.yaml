host: localhost:8080
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: A CMS API service.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Go CMS API
  version: "1.0"
paths:
  /{typeId}:
    get:
      consumes:
      - application/json
      description: |-
        Get nodes of a specific type with pagination, sorting, and flexible filter syntax.
        \n
        **Filtering syntax** (all remaining URL query params are interpreted as filters):
        - Pattern: `{field}_{operator}={value}`
        - Supported operators: `equal`, `include`, `in`, `from`, `to`, `fromto`
        - Semantics:
        * `equal`: exact match (e.g. `status_equal=published`)
        * `include`: substring/contains (e.g. `title_include=hello`)
        * `in`: membership list, comma-separated (e.g. `type_in=article,page`)
        * `from`: lower bound (>=), typically for dates/numbers (e.g. `createdAt_from=2025-01-01T00:00:00Z`)
        * `to`: upper bound (<=) (e.g. `createdAt_to=2025-12-31T23:59:59Z`)
        * `fromto`: range (e.g. `price_fromto=10,100`)
        - Examples: `GET /{typeId}?title_include=guide&status_in=draft,published&createdAt_from=2025-01-01T00:00:00Z`
        \n
        **Sorting syntax**
        - Pattern: `<field> <asc|desc>`; default direction is `asc` if omitted (e.g., `createdAt` == `createdAt asc`)
        - Multiple fields: separate by comma, evaluated left-to-right (e.g., `name desc,age asc`)
        - URL encoding: encode spaces as `%20` or `+` (e.g., `name%20desc,age%20asc`)
        - Examples: `GET /{typeId}?sort=createdAt%20desc,id`, `GET /{typeId}?sort=name%20desc,age%20asc`
      parameters:
      - description: Type ID
        in: path
        name: typeId
        required: true
        type: string
      - default: 1
        description: Page number (1-based)
        in: query
        minimum: 1
        name: page
        type: integer
      - default: 10
        description: Items per page (1-1000)
        in: query
        maximum: 1000
        minimum: 1
        name: pageSize
        type: integer
      - description: 'Sort expression: `<field> <asc|desc>`, multiple fields separated
          by comma. Example: `name desc,age asc`. Default direction is `asc` if omitted.
          Use `%20` (or `+`) to encode spaces in URLs: `name%20desc,age%20asc`'
        in: query
        name: sort
        type: string
      - description: 'Dynamic filters: `{field}_{operator}={value}`. Operators: `equal|include|in|from|to|fromto`.
          Example: `name_equal=ABC&age_from=20`'
        in: query
        name: filter
        type: string
      - description: true or field name to fetch related records
        in: query
        name: referenceView
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: '{ items: [...], pagination: { page, pageSize, total, hasNext,
            nextCursor? } }'
          schema:
            additionalProperties: true
            type: object
        "400":
          description: bad request
          schema:
            type: string
      summary: List nodes by type
      tags:
      - NodeType
    post:
      consumes:
      - multipart/form-data
      description: Create a new node with form data
      parameters:
      - description: Type ID
        in: path
        name: typeId
        required: true
        type: string
      - description: Node title
        in: formData
        name: title
        required: true
        type: string
      - description: Node content
        in: formData
        name: content
        type: string
      - description: Image file
        in: formData
        name: image
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
      summary: Create new node
      tags:
      - NodeType
  /{typeId}/{id}:
    delete:
      consumes:
      - application/json
      description: Soft delete (mark as deleted) a specific node by setting deleted_at/deleted_by
      parameters:
      - description: Type ID
        in: path
        name: typeId
        required: true
        type: string
      - description: Node ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
        "404":
          description: Not Found
      summary: Soft delete node
      tags:
      - NodeType
    get:
      consumes:
      - application/json
      description: Get detailed information of a specific node
      parameters:
      - description: Type ID
        in: path
        name: typeId
        required: true
        type: string
      - description: Node ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
        "404":
          description: Not Found
      summary: Get node details
      tags:
      - NodeType
    put:
      consumes:
      - multipart/form-data
      description: Update node information
      parameters:
      - description: Type ID
        in: path
        name: typeId
        required: true
        type: string
      - description: Node ID
        in: path
        name: id
        required: true
        type: string
      - description: Node title
        in: formData
        name: title
        type: string
      - description: Node content
        in: formData
        name: content
        type: string
      - description: Image file
        in: formData
        name: image
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
        "404":
          description: Not Found
      summary: Update existing node
      tags:
      - NodeType
  /{typeId}/{id}/restore:
    post:
      consumes:
      - application/json
      description: Soft-restore a previously soft-deleted node by clearing `deleted_at`
        and `deleted_by`.
      parameters:
      - description: Type ID
        in: path
        name: typeId
        required: true
        type: string
      - description: Node ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: '{ message: \"success\" }'
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: bad request
          schema:
            type: string
        "404":
          description: '{ error: \"record not found or not deleted\" }'
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Restore node
      tags:
      - NodeType
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
